"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[391],{69391:function(t,r,e){e.r(r),e.d(r,{Multiwrap:function(){return n}});var a=e(84277),s=e(36841),o=e(35553);e(13550),e(25025),e(70332),e(8455),e(26219),e(68834),e(65660),e(61303),e(71497),e(49242),e(94317),e(13670),e(79120),e(97604),e(8187),e(19362),e(59190),e(54730),e(36250),e(85725),e(38730),e(48507),e(38398),e(2090),e(86841),e(49561),e(80580),e(40246),e(54253),e(91559),e(40553),e(26),e(69392),e(29526),e(24601),e(46878),e(77033),e(87033),e(5158),e(27761),e(20583),e(92355),e(84194),e(51121),e(58613),e(32484),e(78435),e(54098),e(54146),e(62555),e(40721),e(77437),e(59189),e(82037),e(2162),e(64063),e(34161),e(50266),e(98839),e(65815),e(52378),e(55173),e(51375),e(43320),e(77191);class n extends s.aK{constructor(t,r,e){let o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},c=arguments.length>4?arguments[4]:void 0,i=arguments.length>5?arguments[5]:void 0,d=arguments.length>6&&void 0!==arguments[6]?arguments[6]:new s.cM(t,r,c,o);super(d,e,i),(0,a._)(this,"abi",void 0),(0,a._)(this,"encoder",void 0),(0,a._)(this,"estimator",void 0),(0,a._)(this,"metadata",void 0),(0,a._)(this,"events",void 0),(0,a._)(this,"roles",void 0),(0,a._)(this,"royalties",void 0),(0,a._)(this,"owner",void 0),this.abi=c,this.metadata=new s.am(this.contractWrapper,s.c$,this.storage),this.roles=new s.an(this.contractWrapper,n.contractRoles),this.encoder=new s.al(this.contractWrapper),this.estimator=new s.aW(this.contractWrapper),this.events=new s.aX(this.contractWrapper),this.royalties=new s.ao(this.contractWrapper,this.metadata),this.owner=new s.a$(this.contractWrapper)}async getWrappedContents(t){let r=await this.contractWrapper.readContract.getWrappedContents(t),e=[],a=[],n=[];for(let t of r)switch(t.tokenType){case 0:{let r=await (0,s.b9)(this.contractWrapper.getProvider(),t.assetContract);e.push({contractAddress:t.assetContract,quantity:o.formatUnits(t.totalAmount,r.decimals)});break}case 1:a.push({contractAddress:t.assetContract,tokenId:t.tokenId});break;case 2:n.push({contractAddress:t.assetContract,tokenId:t.tokenId,quantity:t.totalAmount.toString()})}return{erc20Tokens:e,erc721Tokens:a,erc1155Tokens:n}}async wrap(t,r,e){let a=await (0,s.d0)(r,this.storage),o=e||await this.contractWrapper.getSignerAddress(),n=await this.toTokenStructList(t),c=await this.contractWrapper.sendTransaction("wrap",[n,a,o]),i=this.contractWrapper.parseLogs("TokensWrapped",c?.logs);if(0===i.length)throw Error("TokensWrapped event not found");let d=i[0].args.tokenIdOfWrappedToken;return{id:d,receipt:c,data:()=>this.get(d)}}async unwrap(t,r){let e=r||await this.contractWrapper.getSignerAddress();return{receipt:await this.contractWrapper.sendTransaction("unwrap",[t,e])}}async toTokenStructList(t){let r=[],e=this.contractWrapper.getProvider(),a=await this.contractWrapper.getSignerAddress();if(t.erc20Tokens)for(let a of t.erc20Tokens){let t=await (0,s.ba)(e,a.quantity,a.contractAddress),o=await (0,s.d1)(this.contractWrapper,a.contractAddress,t);if(!o)throw Error(`ERC20 token with contract address "${a.contractAddress}" does not have enough allowance to transfer.

You can set allowance to the multiwrap contract to transfer these tokens by running:

await sdk.getToken("${a.contractAddress}").setAllowance("${this.getAddress()}", ${a.quantity});

`);r.push({assetContract:a.contractAddress,totalAmount:t,tokenId:0,tokenType:0})}if(t.erc721Tokens)for(let e of t.erc721Tokens){let t=await (0,s.cY)(this.contractWrapper.getProvider(),this.getAddress(),e.contractAddress,e.tokenId,a);if(!t)throw Error(`ERC721 token "${e.tokenId}" with contract address "${e.contractAddress}" is not approved for transfer.

You can give approval the multiwrap contract to transfer this token by running:

await sdk.getNFTCollection("${e.contractAddress}").setApprovalForToken("${this.getAddress()}", ${e.tokenId});

`);r.push({assetContract:e.contractAddress,totalAmount:0,tokenId:e.tokenId,tokenType:1})}if(t.erc1155Tokens)for(let e of t.erc1155Tokens){let t=await (0,s.cY)(this.contractWrapper.getProvider(),this.getAddress(),e.contractAddress,e.tokenId,a);if(!t)throw Error(`ERC1155 token "${e.tokenId}" with contract address "${e.contractAddress}" is not approved for transfer.

You can give approval the multiwrap contract to transfer this token by running:

await sdk.getEdition("${e.contractAddress}").setApprovalForAll("${this.getAddress()}", true);

`);r.push({assetContract:e.contractAddress,totalAmount:e.quantity,tokenId:e.tokenId,tokenType:2})}return r}async call(t){for(var r=arguments.length,e=Array(r>1?r-1:0),a=1;a<r;a++)e[a-1]=arguments[a];return this.contractWrapper.call(t,...e)}}(0,a._)(n,"contractRoles",["admin","transfer","minter","unwrap","asset"])}}]);